

func sum(x,y){
if y == 0 {
ret x;
}
ret sum(x+1,y-1);
}


func frenzy(func,wallet){
    while my.money {
        coin_ = pick_random_coin(wallet);
        func(coin_);
    }
}

func fluctuation() {
# inherted my from caller
f = my.base_value / Uniform(5,10);
ret Uniform(-f,f) ;
}

coin DecreasingCoin : CoinGenericTemplate [initial_miners=5,base_value=200]
{
# Inverse coin
update_parameters
{
# lineal inverse grow
completed =  market.time/market.end_time;
my.value = my.base_value - my.base_value * completed  + fluctuation() + my.base_value/5;
}
}


coin GrowingCoin : CoinGenericTemplate [initial_miners=10,base_value=50]
{
update_parameters
{
# lineal grow
completed =  market.time/market.end_time;
my.value = my.base_value + completed*150  + fluctuation();
}
}


coin LocalMaxCoin : CoinGenericTemplate [initial_miners=10,base_value=50]
{
update_parameters
{
x =  market.time/market.end_time*9;
# found this function with polynomial interpolation
v = -0.0025422340628*x^5+0.0400038888069*x^4-0.0939206522966*x^3-0.8379627327975*x^2+3.2258285026753*x;
my.value = v*my.base_value + fluctuation();
}
}


trader RandomTrader : TraderGenericTemplate [initial_money=50]
{
# this reactive trader will sell randomly and buy randomly until it get broken or not
trade
{
   coin_sell = pick_random_coin(my.wallet);
   if coin_sell & Bernoulli(0.5)  {
    sell(coin_sell); # by defaults sells random amounts
   }
   if my.money {
   coin_ = pick_random_coin(market.wallet);
   amount = Uniform(0,my.money) // 1;
   if amount {
   buy(coin_,amount);
   } else {
   say('pass on buy');
   }
   }
   else {
    if !my.wallet {
        leave();
    }
    say('almost leaved');
   }
}
}


trader GreedyReactive : TraderGenericTemplate [initial_money=50]
{
# this is a Greddy Reactive agent it reacts to enviorment with no previous info, it sells expensive and buy cheaper
trade
{
   expensier_sell = pick_expensier_coin(my.wallet);
   if expensier_sell & Bernoulli(0.2) {
    sell(expensier_sell);
   }
   if my.money {
   if Bernoulli(0.4) {
   coin_ = pick_cheaper_coin(market.wallet);
   amount = Uniform(0,my.money) // 1;
   buy(coin_,amount);
   }
   }
   else {
    if !my.wallet {
        leave();
    }
   }
}
}


trader GreedyWithKnowlege : TraderGenericTemplate [initial_money=50]
{
# this is a greedy trader that keeps track on how much costed to try sell strategy
trade
{
   coin_picked = get_with_more_utility();
   if coin_picked & Bernoulli(0.6) {
    sell(coin_picked,'all');
   }
   if my.money {
   coin_ = coin_picked; # by this coin that has utility it could be good
   if !coin_ {
   coin_ = pick_random_coin(market.wallet);
   }
   if Bernoulli(0.4){
   amount = Uniform(0,my.money/2) // 1;
   buy(coin_,amount);
   }
   }
   else {
    if !my.wallet {
        leave();
    }
   }
}
}

func pick_tuned_coin(){
total = my.coin1+my.coin2+my.coin3;
rnd = Uniform(0,total);
if rnd < my.coin1 {
 ret pick_coin(1,market.wallet);
} else {
if rnd < my.coin1+my.coin2 {
 ret pick_coin(2,market.wallet);
}else {
ret pick_coin(3,market.wallet);
}
}
}


trader IntelliTrader : TraderGeneticTemplate [initial_money=50]
{
# this trader initializes itself calculating an aceptable way to invest using Genetic Algorithms
# we can call this a "reactive" agent

initialize
{
my.register_param('tuned_sell');
my.register_param('tuned_buy');
my.register_param('coin1');
my.register_param('coin2');
my.register_param('coin3');
my.optimize(50);
}


trade
{
   coin_picked = get_with_more_utility();
   if coin_picked & Bernoulli(my.tuned_sell) {
    sell(coin_picked);
   }
   if my.money {
   coin_ = pick_tuned_coin();
   if Bernoulli(my.tuned_buy){
   amount = Uniform(0,my.money/2) // 1;
   buy(coin_,amount);
   }
   }
   else {
    if !my.wallet {
        leave();
    }
   }
}
}
